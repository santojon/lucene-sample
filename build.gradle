/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ubuntu' at '4/11/16 7:53 PM' with Gradle 2.12
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_groovy_projects.html
 */

// Apply the groovy plugin to add support for Groovy
apply plugin: 'eclipse'
apply plugin: 'groovy'

subprojects {
    // Apply the groovy plugin to add support for Groovy
    apply plugin: 'eclipse'
    apply plugin: 'groovy'
    apply plugin: 'war'
    version = '1.0.0-SNAPSHOT'
    group = 'com.sample.lucene'
    //configurations.compile.transitive = true  // Make sure transitive project dependencies are resolved.
    
    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
    }
    
    // In this section you declare the dependencies for your production and test code
    dependencies {
        // We use the latest groovy 2.x version for building this library
        compile 'org.codehaus.groovy:groovy-all:2.4.4'
        compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
        compile 'org.apache.lucene:lucene-core:4.0.0'
        compile 'org.apache.lucene:lucene-queryparser:4.0.0'
        compile 'org.apache.lucene:lucene-analyzers-common:4.0.0'
        compile 'org.apache.lucene:lucene-queries:4.0.0'
        
        // To use fileUtils
        compile 'commons-io:commons-io:2.4'
    
        // We use the awesome Spock testing and specification framework
        //testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
        //testCompile 'junit:junit:4.12'
    }
    
    sourceSets {
        main {
    		groovy {
    			srcDir 'src/main/groovy'
    		}
    	}
    	test {
    		groovy {
    			srcDir 'src/test/groovy'
    		}
    	}
    }
    
    task initProject(description: 'Initialize project') << { task ->
        task.project.sourceSets*.groovy.srcDirs*.each { 
            println "Create $it"
            it.mkdirs() 
        }
    }
}

project(':dataaccess') {
    dependencies {
        compile project(':domain')
    }
}

project(':services') {
    dependencies {
        compile project(':dataaccess')
    }
}

project(':controllers') {
    dependencies {
        compile project(':services')
    }
}

project(':web') {
    apply plugin: 'jetty'  // jetty plugin extends war plugin, so we get all war plugin functionality as well.
    
    dependencies {
        compile project(':controllers')  // Because configurations.compile.transitive = true we only have to specify services project, although we also reference dataaccess and domain projects.
    }
    
    // Add extra code to initProject task.
    initProject << { task ->
        def webInfDir = new File(task.project.webAppDir, '/WEB-INF')
        println "Create $webInfDir"
        webInfDir.mkdirs()
    }
    
    jettyRun {
        contextPath = ''
        //jettyEnvXml = file('/home/ubuntu/workspace/web/src/main/webapp/WEB-INF/web.xml')
    }
}